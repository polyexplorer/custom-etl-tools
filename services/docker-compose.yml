# Based on https://debezium.io/documentation/reference/1.5/tutorial.html
# Run as:
#   docker-compose up
---
version: "2"
services:

  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  # You can list the existing topics with
  #   docker-compose exec kafka /kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
  # After start CDC, you can consume the events using this command
  # MySQL: 
  #   docker-compose exec kafka /kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka:9092 --from-beginning --property print.key=true --topic mysqldb.inventory.users
  # Postgres:
  #   docker-compose exec kafka /kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka:9092 --from-beginning --property print.key=true --topic postgresdb.inventory.product
  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    ports:
      - 9092:9092
    environment: 
      #ADVERTISED_HOST_NAME: localhost
      ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on: 
      - zookeeper
    links:
      - zookeeper:zookeeper

  # docker-compose exec mysql bash -c 'mysql -u $MYSQL_USER -p$MYSQL_PASSWORD inventory'
  # mysql:
  #   image: debezium/example-mysql:${DEBEZIUM_VERSION}
  #   ports: 
  #     - 3306:3306
  #   environment: 
  #     MYSQL_ROOT_PASSWORD: debezium
  #     MYSQL_USER: mysqluser
  #     MYSQL_PASSWORD: mysqlpw
  
  # # docker-compose exec postgres env PGOPTIONS="--search_path=inventory" bash -c 'psql -U $POSTGRES_USER postgres'
  # postgres:
  #   image: debezium/example-postgres:${DEBEZIUM_VERSION}
  #   ports:
  #     - 5432:5432
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres  
  
  cdc_connect:
    image: debezium/connect:${DEBEZIUM_VERSION}
    ports: 
      - 8083:8083      
    environment: 
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: cdc_connect_group
      REST_PORT: 8083
      REST_ADVERTISED_HOST_NAME: localhost
      CONFIG_STORAGE_TOPIC: my_cdc_connect_configs
      OFFSET_STORAGE_TOPIC: my_cdc_connect_offsets
      STATUS_STORAGE_TOPIC: my_cdc_connect_statuses
      CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      STATUS_STORAGE_REPLICATION_FACTOR: "1"
    depends_on: 
      - zookeeper
      - kafka
      # - mysql
      # - postgres
    links:
      - zookeeper:zookeeper
      - kafka:kafka
      # - mysql:mysql
      # - postgres:postgres

  sink_connect:
    image: confluentinc/cp-kafka-connect-base:${CONFLUENT_VERSION}
    ports: 
      - 8085:8085
    environment: 
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8085
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_GROUP_ID: sink_connect_group
      CONNECT_CONFIG_STORAGE_TOPIC: my_sink_connect_configs
      CONNECT_OFFSET_STORAGE_TOPIC: my_sink_connect_offsets
      CONNECT_STATUS_STORAGE_TOPIC: my_sink_connect_statuses
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      DEBEZIUM_VERSION: ${DEBEZIUM_VERSION}
    depends_on: 
      - zookeeper
      - kafka
    links:
      - zookeeper:zookeeper
      - kafka:kafka
    # https://github.com/confluentinc/demo-scene/blob/master/kafka-connect-zero-to-hero/docker-compose.yml#L89-L101
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt snowflakeinc/snowflake-kafka-connector:1.5.5
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
